<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Al-Nibras - Arabic Writing Sliding Puzzle</title>
    <link href="https://fonts.googleapis.com/css2?family=Comic+Neue:wght@700&family=Balsamiq+Sans:wght@700&family=Fredoka+One&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Amiri:wght@700&family=Lateef&family=Reem+Kufi&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Comic Neue', cursive;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            color: #333;
        }

        .container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 25px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            max-width: 900px;
            width: 100%;
            border: 8px solid #ff6b6b;
        }

        .original-title {
            text-align: center;
            margin-bottom: 5px;
        }

        .original-title .arabic-name {
            font-family: 'Reem Kufi', sans-serif;
            font-size: 2.8em;
            background: linear-gradient(45deg, #FF6B6B, #4ECDC4, #45B7D1);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 2px 2px 0px rgba(0,0,0,0.1);
        }

        .original-title .english-name {
            font-family: 'Fredoka One', cursive;
            font-size: 1.2em;
            color: #7f8c8d;
            margin-top: -5px;
        }

        /* English Font Styles */
        .english {
            font-family: 'Comic Neue', cursive;
        }

        .english h1 {
            font-family: 'Fredoka One', cursive;
        }

        .english .subtitle {
            font-family: 'Balsamiq Sans', cursive;
        }

        .english .instructions h3 {
            font-family: 'Fredoka One', cursive;
        }

        .english .stat {
            font-family: 'Balsamiq Sans', cursive;
        }

        .english button {
            font-family: 'Fredoka One', cursive;
        }

        .english .current-challenge {
            font-family: 'Balsamiq Sans', cursive;
        }

        .english .educational-purpose h3 {
            font-family: 'Fredoka One', cursive;
        }

        /* Arabic Font Styles */
        .arabic {
            font-family: 'Lateef', serif;
            direction: rtl;
        }

        .arabic h1 {
            font-family: 'Reem Kufi', sans-serif;
            font-size: 3.2em;
        }

        .arabic .subtitle {
            font-family: 'Amiri', serif;
            font-size: 1.6em;
        }

        .arabic .instructions h3 {
            font-family: 'Reem Kufi', sans-serif;
            font-size: 2em;
        }

        .arabic .instructions ul {
            font-size: 1.4em;
            line-height: 2.2;
        }

        .arabic .stat {
            font-family: 'Amiri', serif;
            font-size: 1.2em;
        }

        .arabic button {
            font-family: 'Reem Kufi', sans-serif;
            font-size: 1.1em;
        }

        .arabic .current-challenge {
            font-family: 'Amiri', serif;
            font-size: 1.5em;
        }

        .arabic .educational-purpose h3 {
            font-family: 'Reem Kufi', sans-serif;
            font-size: 2em;
        }

        .arabic .educational-purpose p {
            font-size: 1.3em;
            line-height: 1.8;
        }

        .arabic .writing-area {
            font-size: 1.2em;
        }

        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 10px;
            font-size: 2.8em;
            background: linear-gradient(45deg, #FF6B6B, #4ECDC4, #45B7D1, #96CEB4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 3px 3px 0px rgba(0,0,0,0.1);
        }

        .subtitle {
            text-align: center;
            color: #7f8c8d;
            margin-bottom: 30px;
            font-size: 1.4em;
            background: linear-gradient(45deg, #FF6B6B, #4ECDC4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .instructions {
            background: linear-gradient(135deg, #ffeaa7, #fab1a0);
            border: 4px dashed #e17055;
            padding: 25px;
            margin-bottom: 30px;
            border-radius: 20px;
            box-shadow: 0 8px 20px rgba(0,0,0,0.1);
        }

        .instructions h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.8em;
            text-align: center;
            background: linear-gradient(45deg, #e84393, #0984e3);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .instructions ul {
            list-style-position: inside;
            line-height: 1.8;
            font-size: 1.2em;
        }

        .instructions li {
            margin-bottom: 10px;
            padding-left: 10px;
            font-weight: bold;
        }

        .instructions li:nth-child(1) { color: #e84393; }
        .instructions li:nth-child(2) { color: #0984e3; }
        .instructions li:nth-child(3) { color: #00b894; }
        .instructions li:nth-child(4) { color: #6c5ce7; }
        .instructions li:nth-child(5) { color: #636e72; }

        .game-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 20px;
            background: linear-gradient(135deg, #74b9ff, #a29bfe);
            border-radius: 15px;
            border: 4px solid #6c5ce7;
        }

        .stats {
            display: flex;
            gap: 20px;
        }

        .stat {
            background: white;
            padding: 15px 25px;
            border-radius: 12px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
            font-size: 1.1em;
            border: 3px solid;
        }

        .stat:nth-child(1) {
            border-color: #ff6b6b;
            color: #ff6b6b;
        }

        .stat:nth-child(2) {
            border-color: #4ecdc4;
            color: #4ecdc4;
        }

        .controls {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        button {
            padding: 15px 25px;
            border: none;
            border-radius: 15px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            transition: all 0.3s ease;
            box-shadow: 0 6px 0 rgba(0,0,0,0.2);
            position: relative;
            top: 0;
        }

        button:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 0 rgba(0,0,0,0.2);
        }

        button:active {
            transform: translateY(2px);
            box-shadow: 0 2px 0 rgba(0,0,0,0.2);
        }

        #shuffleBtn {
            background: linear-gradient(45deg, #FF6B6B, #FF8E8E);
            color: white;
            border: 3px solid #ff4757;
        }

        #resetBtn {
            background: linear-gradient(45deg, #74B9FF, #0984E3);
            color: white;
            border: 3px solid #0984e3;
        }

        #flipBtn {
            background: linear-gradient(45deg, #A29BFE, #6C5CE7);
            color: white;
            border: 3px solid #6c5ce7;
        }

        #nextChallenge {
            background: linear-gradient(45deg, #00B894, #55EFC4);
            color: white;
            border: 3px solid #00b894;
        }

        #soundToggle {
            background: linear-gradient(45deg, #FDCB6E, #FFEAA7);
            color: #2d3436;
            border: 3px solid #fdcb6e;
        }

        #languageToggle {
            background: linear-gradient(45deg, #FF9FF3, #F368E0);
            color: white;
            border: 3px solid #F368E0;
        }

        #colorToggle {
            background: linear-gradient(45deg, #FF9F1C, #FFBF69);
            color: white;
            border: 3px solid #FF9F1C;
        }

        .puzzle-area {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin: 30px 0;
            align-items: flex-start;
        }

        .puzzle-container {
            position: relative;
        }

        .puzzle-board {
            display: grid;
            grid-template-columns: repeat(5, 70px);
            grid-template-rows: repeat(9, 70px);
            gap: 4px;
            background: linear-gradient(135deg, #2c3e50, #34495e);
            padding: 10px;
            border-radius: 20px;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3);
            position: relative;
            transition: transform 0.6s ease;
            border: 6px solid #ff9ff3;
        }

        .puzzle-board.flipped {
            transform: rotateY(180deg);
        }

        .reference-side {
            display: none;
            grid-template-columns: repeat(5, 70px);
            grid-template-rows: repeat(7, 70px);
            gap: 4px;
            background: linear-gradient(135deg, #2c3e50, #34495e);
            padding: 10px;
            border-radius: 20px;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3);
            position: absolute;
            top: 70px;
            left: 0;
            width: 100%;
            height: calc(7 * 70px + 20px);
            transform: rotateY(180deg);
            backface-visibility: hidden;
            border: 6px solid #74b9ff;
        }

        .puzzle-board.flipped .reference-side {
            display: grid;
        }

        .puzzle-board.flipped .tile {
            visibility: hidden;
        }

        .tile {
            width: 70px;
            height: 70px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            user-select: none;
            box-shadow: inset 0 0 15px rgba(0,0,0,0.2);
            font-weight: bold;
            position: relative;
            backface-visibility: hidden;
            border: 3px solid;
        }

        .tile:hover {
            transform: scale(1.08);
            box-shadow: 0 8px 20px rgba(0,0,0,0.4);
            z-index: 10;
        }

        .hidden-tile {
            opacity: 0.3;
        }

        .bright-green {
            background: linear-gradient(135deg, #27ae60, #2ecc71);
            border-color: #219652;
        }

        .bright-blue {
            background: linear-gradient(135deg, #3498db, #2980b9);
            border-color: #21618c;
        }

        .bright-purple {
            background: linear-gradient(135deg, #9b59b6, #8e44ad);
            border-color: #6c3483;
        }

        .bright-orange {
            background: linear-gradient(135deg, #e67e22, #d35400);
            border-color: #a04000;
        }

        .bright-pink {
            background: linear-gradient(135deg, #e84393, #fd79a8);
            border-color: #e84393;
        }

        .white-tile {
            background: linear-gradient(135deg, #ffffff, #f5f6fa);
            border-color: #e0e0e0;
        }

        .empty {
            background: transparent;
            border: 3px dashed #7f8c8d;
            cursor: default;
        }

        .empty:hover {
            transform: none;
            box-shadow: none;
        }

        .reference-cell {
            width: 70px;
            height: 70px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 12px;
            background: linear-gradient(135deg, #ffeaa7, #fab1a0);
            border: 3px solid #e17055;
            font-size: 28px;
            font-weight: bold;
            color: #2d3436;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.1);
        }

        .english .reference-cell {
            font-family: 'Fredoka One', cursive;
        }

        .arabic .reference-cell {
            font-family: 'Reem Kufi', sans-serif;
        }

        .reference-label {
            position: absolute;
            top: -20px;
            left: 50%;
            transform: translateX(-50%);
            background: linear-gradient(45deg, #FF6B6B, #FF8E8E);
            color: white;
            padding: 8px 20px;
            border-radius: 20px;
            font-size: 16px;
            font-weight: bold;
            border: 3px solid #ff4757;
            box-shadow: 0 4px 0 rgba(0,0,0,0.1);
        }

        .english .reference-label {
            font-family: 'Fredoka One', cursive;
        }

        .arabic .reference-label {
            font-family: 'Reem Kufi', sans-serif;
        }

        .challenge-info {
            background: linear-gradient(135deg, #fff3cd, #ffeaa7);
            border: 4px solid #fdcb6e;
            border-radius: 15px;
            padding: 25px;
            margin-top: 20px;
            box-shadow: 0 8px 20px rgba(0,0,0,0.1);
        }

        .challenge-info h4 {
            color: #856404;
            margin-bottom: 15px;
            font-size: 1.6em;
            text-align: center;
            background: linear-gradient(45deg, #e84393, #0984e3);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .current-challenge {
            font-size: 1.4em;
            font-weight: bold;
            color: #2c3e50;
            text-align: center;
            padding: 15px;
            background: white;
            border-radius: 12px;
            border: 3px dashed #74b9ff;
        }

        .writing-area {
            margin-top: 15px;
            text-align: center;
            color: #7f8c8d;
            font-size: 1.1em;
            font-weight: bold;
            background: linear-gradient(45deg, #74b9ff, #a29bfe);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .educational-purpose {
            text-align: center;
            margin-top: 30px;
            padding: 25px;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border-radius: 15px;
            border: 4px dashed #bdc3c7;
        }

        .educational-purpose h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.8em;
            background: linear-gradient(45deg, #FF6B6B, #4ECDC4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .educational-purpose p {
            font-size: 1.2em;
            line-height: 1.6;
            color: #666;
        }

        .copyright {
            text-align: center;
            margin-top: 30px;
            padding: 20px;
            background: linear-gradient(135deg, #dfe6e9, #b2bec3);
            border-radius: 15px;
            border: 3px solid #636e72;
            font-size: 0.9em;
            color: #2d3436;
        }

        .copyright .english {
            font-family: 'Comic Neue', cursive;
            margin-bottom: 10px;
        }

        .copyright .arabic {
            font-family: 'Lateef', serif;
            direction: rtl;
            font-size: 1.1em;
        }

        .color-key {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
            font-size: 1.1em;
            flex-wrap: wrap;
        }

        .color-sample {
            display: inline-block;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            margin-right: 8px;
            vertical-align: middle;
            border: 2px solid white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .sound-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-left: 8px;
            background: #27ae60;
            border: 2px solid white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .sound-indicator.muted {
            background: #e74c3c;
        }

        /* Fun animations */
        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% {transform: translateY(0);}
            40% {transform: translateY(-10px);}
            60% {transform: translateY(-5px);}
        }

        .bounce {
            animation: bounce 1s;
        }

        @keyframes pulse {
            0% {transform: scale(1);}
            50% {transform: scale(1.05);}
            100% {transform: scale(1);}
        }

        .pulse {
            animation: pulse 0.5s;
        }

        @media (max-width: 768px) {
            .puzzle-board {
                grid-template-columns: repeat(5, 50px);
                grid-template-rows: repeat(9, 50px);
            }
            
            .tile {
                width: 50px;
                height: 50px;
            }

            .reference-side {
                grid-template-columns: repeat(5, 50px);
                grid-template-rows: repeat(7, 50px);
                top: 50px;
                height: calc(7 * 50px + 20px);
            }

            .reference-cell {
                width: 50px;
                height: 50px;
                font-size: 20px;
            }
            
            .game-info {
                flex-direction: column;
                gap: 15px;
            }

            .controls {
                justify-content: center;
            }

            .puzzle-area {
                flex-direction: column;
                align-items: center;
                gap: 20px;
            }

            h1 {
                font-size: 2.2em;
            }

            .arabic h1 {
                font-size: 2.5em;
            }

            .original-title .arabic-name {
                font-size: 2.2em;
            }

            .instructions {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container english" id="mainContainer">
        <!-- Original Arabic Name -->
        <div class="original-title">
            <div class="arabic-name">النّبراس</div>
            <div class="english-name">Al-Nibras (The Beacon)</div>
        </div>

        <h1 class="bounce">🎮 Arabic Writing Sliding Puzzle 🎮</h1>
        <div class="subtitle">5×9 Grid - Learn Arabic Letters & Numerals</div>
        
        <div class="instructions">
            <h3>🌟 How to Play: 🌟</h3>
            <ul>
                <li>🎯 Click any tile adjacent to the empty space to slide it</li>
                <li>📝 Form Arabic letters and numerals in 5×7 grid</li>
                <li>🔄 Use "Flip Puzzle" to see the reference patterns on the back</li>
                <li>🏆 Make challenges by writing the character number in Challenge button</li>
                <li>🌈 Change tile colors to suit your preferences!</li>
            </ul>
            <div class="color-key">
                <div><span class="color-sample" style="background: #27ae60;"></span> Green Tiles</div>
                <div><span class="color-sample" style="background: #ffffff;"></span> White Tiles</div>
                <div><span class="color-sample" style="background: #27ae60; opacity: 0.3;"></span> Hidden Green</div>
                <div><span class="color-sample" style="background: #ffffff; opacity: 0.3;"></span> Hidden White</div>
            </div>
        </div>

        <div class="game-info">
            <div class="stats">
                <div class="stat">
                    <strong>🎯 Moves:</strong> <span id="moveCounter">0</span>
                </div>
                <div class="stat">
                    <strong>🏆 Challenge:</strong> <span id="challengeCounter">1/39</span>
                </div>
            </div>
            <div class="controls">
                <button id="shuffleBtn">🎲 Shuffle</button>
                <button id="resetBtn">🔄 Reset</button>
                <button id="flipBtn">📖 Flip Puzzle</button>
                <button id="nextChallenge">⭐ Next Challenge</button>
                <button id="colorToggle">🎨 Tile Color</button>
                <button id="soundToggle">🔊 Sound: ON <span class="sound-indicator"></span></button>
                <button id="languageToggle">🌐 English / العربية</button>
            </div>
        </div>

        <div class="puzzle-area">
            <div class="puzzle-container">
                <div class="puzzle-board" id="puzzleBoard">
                    <!-- Puzzle tiles will be generated by JavaScript -->
                </div>
                <div class="reference-side" id="referenceSide">
                    <!-- Reference patterns will be generated by JavaScript -->
                </div>
            </div>
            
            <div class="challenge-info">
                <h4>🎯 Current Challenge:</h4>
                <div class="current-challenge" id="currentChallenge">Form the Arabic Letter 1</div>
                <p style="margin-top: 15px; color: #666;">
                    <strong>💡 Tip:</strong> Use the flip button to see the reference pattern on the back of the puzzle, just like the physical version!
                </p>
            </div>
        </div>

        <div class="writing-area">
            <strong>📖 Reading Area:</strong> Middle 5×7 grid (Arabic letters and numerals are read in this clear area)
        </div>

        <div class="educational-purpose">
            <h3>🎓 Educational Purpose</h3>
            <p>This digital version mimics the physical sliding puzzle. Form Arabic letters (Challenge 1-29) and Arabic numerals (challenge 30-39) by sliding tiles, then flip to check against the reference patterns! Perfect for kids learning Arabic letters and numerals! 🎉</p>
            <p style="margin-top: 15px; font-style: italic;">
                <strong>Important Note:</strong> This game is based on the "Standard Script" developed by Professor Bouhadejra in 1990 for writing Arabic with a detached script. This script takes into account the hamza and short vowel marks (Harakat) and allows for automated processing of the Arabic language.
            </p>
        </div>

        <!-- Copyright Information -->
        <div class="copyright">
            <div class="english">
                © 1992 Original Game Design by Prof. Abdelmalek Bouhadjera<br>
                Digital Version © 2024 - All Rights Reserved
            </div>
            <div class="arabic">
                © 1992 التصميم الأصلي للأستاذ الدكتور عبد المالك بوحجرة<br>
                النسخة الرقمية © 2024 - جميع الحقوق محفوظة
            </div>
        </div>
    </div>

    <script>
        // Language content
        const translations = {
            english: {
                originalName: "Al-Nibras (The Beacon)",
                title: "🎮 Arabic Writing Sliding Puzzle 🎮",
                subtitle: "5×9 Grid - Learn Arabic Numerals",
                instructions: {
                    title: "🌟 How to Play: 🌟",
                    items: [
                        "🎯 Click any tile adjacent to the empty space to slide it",
                        "📝 Form Arabic letters and numerals in 5×7 grid",
                        "🔄 Use \"Flip Puzzle\" to see the reference patterns on the back",
                        "🏆 Make challenges by writing the character number in Challenge button",
                        "🌈 Change tile colors to suit your preferences!"
                    ]
                },
                buttons: {
                    shuffle: "🎲 Shuffle",
                    reset: "🔄 Reset",
                    flip: "📖 Flip Puzzle",
                    nextChallenge: "⭐ Next Challenge",
                    colorToggle: "🎨 Tile Color",
                    soundOn: "🔊 Sound: ON",
                    soundOff: "🔇 Sound: OFF",
                    language: "🌐 English / العربية"
                },
                stats: {
                    moves: "🎯 Moves:",
                    challenge: "🏆 Challenge:"
                },
                challenge: {
                    title: "🎯 Current Challenge:",
                    tip: "💡 Tip: Use the flip button to see the reference pattern on the back of the puzzle, just like the physical version!"
                },
                writingArea: "📖 Reading Area: Middle 5×7 grid (Arabic letters and numerals are read in this clear area)",
                educational: {
                    title: "🎓 Educational Purpose",
                    text: "This digital version mimics the physical sliding puzzle. Form Arabic letters (Challenge 1-29) and Arabic numerals (challenge 30-39) by sliding tiles, then flip to check against the reference patterns! Perfect for kids learning Arabic letters and numerals! 🎉",
                    note: "Important Note: This game is based on the \"Standard Script\" developed by Professor Bouhadejra in 1990 for writing Arabic with a detached script. This script takes into account the hamza and short vowel marks (Harakat) and allows for automated processing of the Arabic language."
                },
                referenceLabel: "Reference Patterns",
                colorKey: ["Green Tiles", "White Tiles", "Hidden Green", "Hidden White"],
                copyright: {
                    english: "© 1992 Original Game Design by Prof. Abdelmalek Bouhadjera<br>Digital Version © 2024 - All Rights Reserved",
                    arabic: "© 1992 التصميم الأصلي للأستاذ الدكتور عبد المالك بوحجرة<br>النسخة الرقمية © 2024 - جميع الحقوق محفوظة"
                }
            },
            arabic: {
                originalName: "النّبراس (The Beacon)",
                title: "🎮 لغز الكتابة العربية المنزلق 🎮",
                subtitle: "شبكة 5 في 9 : تعلَّم الحروف والأرقام العربية",
                instructions: {
                    title: "🌟 طريقة اللعب: 🌟",
                    items: [
                        "🎯 انقر على أي قطعة مجاورة للمساحة الفارغة لتحريكها",
                        "📝 شَكِّل الحروف والأرقام العربية في الشبكة 5 في 7",
                        "🔄 اضغط على \"قَلِّب اللغز\" لرؤية الأنماط المرجعية على الظهر",
                        "🏆 أكمِل التحديات للتعوُّد على الحروف والأرقام المختلفة",
                        "🌈 غيِّر ألوان القطع لتتناسب مع ذوقك!"
                    ]
                },
                buttons: {
                    shuffle: "🎲 خلط",
                    reset: "🔄 إعادة",
                    flip: "📖 قلب اللغز",
                    nextChallenge: "⭐ التحدي التالي",
                    colorToggle: "🎨 لون القطع",
                    soundOn: "🔊 الصوت: تشغيل",
                    soundOff: "🔇 الصوت: إيقاف",
                    language: "🌐 العربية / English"
                },
                stats: {
                    moves: "🎯 الحركات:",
                    challenge: "🏆 التحدي:"
                },
                challenge: {
                    title: "🎯 التحدي الحالي:",
                    tip: "💡 نصيحة: استخدم زر القلب لرؤية النمط المرجعي على ظهر اللغز، تماماً مثل النسخة المادية!"
                },
                writingArea: "📖 تُقرَأ الحروف والأرقام في المنطقة الواضحة من الشبكة",
                educational: {
                    title: "🎓 الغرض التعليمي",
                    text: "هذه النسخة الرقمية تحاكي اللغز المنزلق المادي. شَكِّل الحروف العربية (التحدي 1-29) والأرقام العربية (التحدي 30-39) بتحريك القطع، ثم اقلب للتحقق من الأنماط المرجعية! مثالي للأطفال الذين يتعلمون الحروف والأرقام العربية! 🎉",
                    note: "ملاحظة هامة: هذه اللعبة مبنية على \"الخط المعياري\" الذي طوره الأستاذ بوحجرة في عام 1990 لكتابة العربية بخط منفصل. يأخذ هذا الخط في الاعتبار الهمزة وعلامات التشكيل (الحركات) ويسمح بالمعالجة الآلية للغة العربية."
                },
                referenceLabel: "الأنماط المرجعية",
                colorKey: ["القطع الخضراء", "القطع البيضاء", "الأخضر المخفي", "الأبيض المخفي"],
                copyright: {
                    english: "© 1992 Original Game Design by Prof. Abdelmalek Bouhadjera<br>Digital Version © 2024 - All Rights Reserved",
                    arabic: "© 1992 التصميم الأصلي للأستاذ الدكتور عبد المالك بوحجرة<br>النسخة الرقمية © 2024 - جميع الحقوق محفوظة"
                }
            }
        };

        class SoundManager {
            constructor() {
                this.enabled = true;
            }

            createSlideSound() {
                const context = new (window.AudioContext || window.webkitAudioContext)();
                const oscillator = context.createOscillator();
                const gainNode = context.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(context.destination);
                
                oscillator.frequency.setValueAtTime(200, context.currentTime);
                oscillator.frequency.exponentialRampToValueAtTime(100, context.currentTime + 0.1);
                
                gainNode.gain.setValueAtTime(0.3, context.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, context.currentTime + 0.1);
                
                oscillator.start(context.currentTime);
                oscillator.stop(context.currentTime + 0.1);
            }

            createFlipSound() {
                const context = new (window.AudioContext || window.webkitAudioContext)();
                const oscillator = context.createOscillator();
                const gainNode = context.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(context.destination);
                
                oscillator.type = 'sine';
                oscillator.frequency.setValueAtTime(300, context.currentTime);
                oscillator.frequency.exponentialRampToValueAtTime(150, context.currentTime + 0.3);
                
                gainNode.gain.setValueAtTime(0.2, context.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, context.currentTime + 0.3);
                
                oscillator.start(context.currentTime);
                oscillator.stop(context.currentTime + 0.3);
            }

            createShuffleSound() {
                const context = new (window.AudioContext || window.webkitAudioContext)();
                for (let i = 0; i < 3; i++) {
                    const oscillator = context.createOscillator();
                    const gainNode = context.createGain();
                    
                    oscillator.connect(gainNode);
                    gainNode.connect(context.destination);
                    
                    oscillator.frequency.setValueAtTime(150 + i * 50, context.currentTime + i * 0.05);
                    oscillator.frequency.exponentialRampToValueAtTime(80, context.currentTime + i * 0.05 + 0.1);
                    
                    gainNode.gain.setValueAtTime(0.2, context.currentTime + i * 0.05);
                    gainNode.gain.exponentialRampToValueAtTime(0.01, context.currentTime + i * 0.05 + 0.1);
                    
                    oscillator.start(context.currentTime + i * 0.05);
                    oscillator.stop(context.currentTime + i * 0.05 + 0.1);
                }
            }

            createClickSound() {
                const context = new (window.AudioContext || window.webkitAudioContext)();
                const oscillator = context.createOscillator();
                const gainNode = context.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(context.destination);
                
                oscillator.frequency.setValueAtTime(800, context.currentTime);
                oscillator.frequency.exponentialRampToValueAtTime(200, context.currentTime + 0.05);
                
                gainNode.gain.setValueAtTime(0.3, context.currentTime);
                gainNode.gain.exponentialRampToValueAtTime(0.01, context.currentTime + 0.05);
                
                oscillator.start(context.currentTime);
                oscillator.stop(context.currentTime + 0.05);
            }

            createSuccessSound() {
                const context = new (window.AudioContext || window.webkitAudioContext)();
                const times = [0, 0.1, 0.2, 0.3];
                const frequencies = [523.25, 659.25, 783.99, 1046.50];
                
                times.forEach((time, index) => {
                    const oscillator = context.createOscillator();
                    const gainNode = context.createGain();
                    
                    oscillator.connect(gainNode);
                    gainNode.connect(context.destination);
                    
                    oscillator.frequency.setValueAtTime(frequencies[index], context.currentTime + time);
                    
                    gainNode.gain.setValueAtTime(0.3, context.currentTime + time);
                    gainNode.gain.exponentialRampToValueAtTime(0.01, context.currentTime + time + 0.3);
                    
                    oscillator.start(context.currentTime + time);
                    oscillator.stop(context.currentTime + time + 0.3);
                });
            }

            play(soundName) {
                if (!this.enabled) return;
                
                try {
                    switch(soundName) {
                        case 'slide':
                            this.createSlideSound();
                            break;
                        case 'flip':
                            this.createFlipSound();
                            break;
                        case 'shuffle':
                            this.createShuffleSound();
                            break;
                        case 'click':
                            this.createClickSound();
                            break;
                        case 'success':
                            this.createSuccessSound();
                            break;
                    }
                } catch (error) {
                    console.log('Sound playback error:', error);
                }
            }

            toggle() {
                this.enabled = !this.enabled;
                const button = document.getElementById('soundToggle');
                const indicator = button.querySelector('.sound-indicator');
                
                if (this.enabled) {
                    button.innerHTML = translations[currentLanguage].buttons.soundOn + ' <span class="sound-indicator"></span>';
                    this.play('click');
                } else {
                    button.innerHTML = translations[currentLanguage].buttons.soundOff + ' <span class="sound-indicator muted"></span>';
                }
            }
        }

        let currentLanguage = 'english';

        class SlidingPuzzle {
            constructor() {
                this.rows = 9;
                this.cols = 5;
                this.board = [];
                this.tiles = [];
                this.emptyPos = { row: 4, col: 2 };
                this.moves = 0;
                this.isMoving = false;
                this.isFlipped = false;
                this.soundManager = new SoundManager();
                this.gameStarted = false;
                
                // Color options for the tiles
                this.colorOptions = [
                    { name: 'Green', class: 'bright-green', sample: '#27ae60' },
                    { name: 'Blue', class: 'bright-blue', sample: '#3498db' },
                    { name: 'Purple', class: 'bright-purple', sample: '#9b59b6' },
                    { name: 'Orange', class: 'bright-orange', sample: '#e67e22' },
                    { name: 'Pink', class: 'bright-pink', sample: '#e84393' }
                ];
                this.currentColorIndex = 0;
                
                // Arabic letters (1-29) and numerals (30-39)
                this.challenges = [
                    // Arabic letters (1-29)
                    { character: 'ا', name: 'Letter 1 (Alif)', arabicName: 'الحرف 1 (ألف)' },
                    { character: 'ب', name: 'Letter 2 (Ba)', arabicName: 'الحرف 2 (باء)' },
                    { character: 'ت', name: 'Letter 3 (Ta)', arabicName: 'الحرف 3 (تاء)' },
                    { character: 'ث', name: 'Letter 4 (Tha)', arabicName: 'الحرف 4 (ثاء)' },
                    { character: 'ج', name: 'Letter 5 (Jeem)', arabicName: 'الحرف 5 (جيم)' },
                    { character: 'ح', name: 'Letter 6 (Ha)', arabicName: 'الحرف 6 (حاء)' },
                    { character: 'خ', name: 'Letter 7 (Kha)', arabicName: 'الحرف 7 (خاء)' },
                    { character: 'د', name: 'Letter 8 (Dal)', arabicName: 'الحرف 8 (دال)' },
                    { character: 'ذ', name: 'Letter 9 (Thal)', arabicName: 'الحرف 9 (ذال)' },
                    { character: 'ر', name: 'Letter 10 (Ra)', arabicName: 'الحرف 10 (راء)' },
                    { character: 'ز', name: 'Letter 11 (Zay)', arabicName: 'الحرف 11 (زاي)' },
                    { character: 'س', name: 'Letter 12 (Seen)', arabicName: 'الحرف 12 (سين)' },
                    { character: 'ش', name: 'Letter 13 (Sheen)', arabicName: 'الحرف 13 (شين)' },
                    { character: 'ص', name: 'Letter 14 (Sad)', arabicName: 'الحرف 14 (صاد)' },
                    { character: 'ض', name: 'Letter 15 (Dad)', arabicName: 'الحرف 15 (ضاد)' },
                    { character: 'ط', name: 'Letter 16 (Ta)', arabicName: 'الحرف 16 (طاء)' },
                    { character: 'ظ', name: 'Letter 17 (Za)', arabicName: 'الحرف 17 (ظاء)' },
                    { character: 'ع', name: 'Letter 18 (Ayn)', arabicName: 'الحرف 18 (عين)' },
                    { character: 'غ', name: 'Letter 19 (Ghayn)', arabicName: 'الحرف 19 (غين)' },
                    { character: 'ف', name: 'Letter 20 (Fa)', arabicName: 'الحرف 20 (فاء)' },
                    { character: 'ق', name: 'Letter 21 (Qaf)', arabicName: 'الحرف 21 (قاف)' },
                    { character: 'ك', name: 'Letter 22 (Kaf)', arabicName: 'الحرف 22 (كاف)' },
                    { character: 'ل', name: 'Letter 23 (Lam)', arabicName: 'الحرف 23 (لام)' },
                    { character: 'م', name: 'Letter 24 (Meem)', arabicName: 'الحرف 24 (ميم)' },
                    { character: 'ن', name: 'Letter 25 (Noon)', arabicName: 'الحرف 25 (نون)' },
                    { character: 'ه', name: 'Letter 26 (Ha)', arabicName: 'الحرف 26 (هاء)' },
                    { character: 'و', name: 'Letter 27 (Waw)', arabicName: 'الحرف 27 (واو)' },
                    { character: 'ي', name: 'Letter 28 (Ya)', arabicName: 'الحرف 28 (ياء)' },
                    { character: 'ء', name: 'Letter 29 (Hamza)', arabicName: 'الحرف 29 (همزة)' },
                    
                    // Arabic numerals (30-39)
                    { character: '0', name: 'Numeral 30 (Zero)', arabicName: 'الرقم 30 (صفر)' },
                    { character: '1', name: 'Numeral 31 (One)', arabicName: 'الرقم 31 (واحد)' },
                    { character: '2', name: 'Numeral 32 (Two)', arabicName: 'الرقم 32 (اثنان)' },
                    { character: '3', name: 'Numeral 33 (Three)', arabicName: 'الرقم 33 (ثلاثة)' },
                    { character: '4', name: 'Numeral 34 (Four)', arabicName: 'الرقم 34 (أربعة)' },
                    { character: '5', name: 'Numeral 35 (Five)', arabicName: 'الرقم 35 (خمسة)' },
                    { character: '6', name: 'Numeral 36 (Six)', arabicName: 'الرقم 36 (ستة)' },
                    { character: '7', name: 'Numeral 37 (Seven)', arabicName: 'الرقم 37 (سبعة)' },
                    { character: '8', name: 'Numeral 38 (Eight)', arabicName: 'الرقم 38 (ثمانية)' },
                    { character: '9', name: 'Numeral 39 (Nine)', arabicName: 'الرقم 39 (تسعة)' }
                ];
                this.currentChallenge = 0;
                
                this.createTiles();
                this.initializeBoard();
                this.renderBoard();
                this.setupEventListeners();
                this.updateMoveCounter();
                this.updateChallengeDisplay();
                this.updateLanguage();
            }

            updateLanguage() {
                const lang = translations[currentLanguage];
                const container = document.getElementById('mainContainer');
                
                // Update container class for RTL and fonts
                container.className = currentLanguage === 'arabic' ? 'container arabic' : 'container english';
                
                // Update original name
                document.querySelector('.original-title .english-name').textContent = lang.originalName;
                
                // Update text content
                document.querySelector('h1').textContent = lang.title;
                document.querySelector('.subtitle').textContent = lang.subtitle;
                
                // Update instructions
                document.querySelector('.instructions h3').textContent = lang.instructions.title;
                const instructionItems = document.querySelectorAll('.instructions li');
                lang.instructions.items.forEach((item, index) => {
                    if (instructionItems[index]) {
                        instructionItems[index].innerHTML = item;
                    }
                });
                
                // Update buttons
                document.getElementById('shuffleBtn').textContent = lang.buttons.shuffle;
                document.getElementById('resetBtn').textContent = lang.buttons.reset;
                document.getElementById('flipBtn').textContent = lang.buttons.flip;
                document.getElementById('nextChallenge').textContent = lang.buttons.nextChallenge;
                document.getElementById('colorToggle').textContent = lang.buttons.colorToggle;
                document.getElementById('languageToggle').textContent = lang.buttons.language;
                
                // Update sound button
                const soundBtn = document.getElementById('soundToggle');
                if (this.soundManager.enabled) {
                    soundBtn.innerHTML = lang.buttons.soundOn + ' <span class="sound-indicator"></span>';
                } else {
                    soundBtn.innerHTML = lang.buttons.soundOff + ' <span class="sound-indicator muted"></span>';
                }
                
                // Update stats
                const statLabels = document.querySelectorAll('.stat strong');
                statLabels[0].innerHTML = lang.stats.moves;
                statLabels[1].innerHTML = lang.stats.challenge;
                
                // Update challenge section
                document.querySelector('.challenge-info h4').textContent = lang.challenge.title;
                document.querySelector('.challenge-info p').innerHTML = `<strong>${lang.challenge.tip.split(':')[0]}:</strong> ${lang.challenge.tip.split(':')[1]}`;
                
                // Update writing area
                document.querySelector('.writing-area').innerHTML = `<strong>${lang.writingArea}</strong>`;
                
                // Update educational purpose
                document.querySelector('.educational-purpose h3').textContent = lang.educational.title;
                document.querySelector('.educational-purpose p').innerHTML = lang.educational.text + 
                    '<p style="margin-top: 15px; font-style: italic;"><strong>' + 
                    (currentLanguage === 'english' ? 'Important Note:' : 'ملاحظة هامة:') + 
                    '</strong> ' + lang.educational.note + '</p>';
                
                // Update reference label
                const referenceLabel = document.querySelector('.reference-label');
                if (referenceLabel) {
                    referenceLabel.textContent = lang.referenceLabel;
                }
                
                // Update color key
                const colorKeyItems = document.querySelectorAll('.color-key div');
                const currentColor = this.colorOptions[this.currentColorIndex];
                colorKeyItems[0].innerHTML = `<span class="color-sample" style="background: ${currentColor.sample};"></span> ${currentColor.name} Tiles`;
                colorKeyItems[1].innerHTML = `<span class="color-sample" style="background: #ffffff;"></span> White Tiles`;
                colorKeyItems[2].innerHTML = `<span class="color-sample" style="background: ${currentColor.sample}; opacity: 0.3;"></span> Hidden ${currentColor.name}`;
                colorKeyItems[3].innerHTML = `<span class="color-sample" style="background: #ffffff; opacity: 0.3;"></span> Hidden White`;
                
                // Update copyright
                const copyrightEnglish = document.querySelector('.copyright .english');
                const copyrightArabic = document.querySelector('.copyright .arabic');
                copyrightEnglish.innerHTML = lang.copyright.english;
                copyrightArabic.innerHTML = lang.copyright.arabic;
                
                // Update current challenge display
                this.updateChallengeDisplay();
            }

            toggleLanguage() {
                currentLanguage = currentLanguage === 'english' ? 'arabic' : 'english';
                this.updateLanguage();
                this.soundManager.play('click');
            }

            toggleColor() {
                this.soundManager.play('click');
                this.currentColorIndex = (this.currentColorIndex + 1) % this.colorOptions.length;
                
                // Update all colored tiles with the new color
                this.updateTileColors();
                this.renderBoard();
                this.updateLanguage();
                
                // Add fun animation
                const colorBtn = document.getElementById('colorToggle');
                colorBtn.classList.add('pulse');
                setTimeout(() => colorBtn.classList.remove('pulse'), 500);
            }

            updateTileColors() {
                // Update the color of all colored tiles in the tiles array
                for (let tile of this.tiles) {
                    if (tile.color !== 'white-tile') {
                        tile.color = this.colorOptions[this.currentColorIndex].class;
                    }
                }
                
                // Update the color of all colored tiles on the board
                for (let row = 0; row < this.rows; row++) {
                    for (let col = 0; col < this.cols; col++) {
                        const tile = this.board[row][col];
                        if (tile && tile.color !== 'white-tile') {
                            tile.color = this.colorOptions[this.currentColorIndex].class;
                        }
                    }
                }
            }

            createTiles() {
                this.tiles = [];
                let tileId = 0;
                
                for (let row = 0; row < this.rows; row++) {
                    for (let col = 0; col < this.cols; col++) {
                        if (row === this.emptyPos.row && col === this.emptyPos.col) {
                            continue;
                        }
                        
                        const isGreen = (row + col) % 2 === 0;
                        this.tiles.push({
                            id: tileId++,
                            color: isGreen ? this.colorOptions[this.currentColorIndex].class : 'white-tile',
                            originalRow: row,
                            originalCol: col
                        });
                    }
                }
            }

            initializeBoard() {
                for (let row = 0; row < this.rows; row++) {
                    this.board[row] = [];
                    for (let col = 0; col < this.cols; col++) {
                        this.board[row][col] = null;
                    }
                }
                
                this.emptyPos = { row: 4, col: 2 };
                this.board[this.emptyPos.row][this.emptyPos.col] = null;
                
                let tileIndex = 0;
                for (let row = 0; row < this.rows; row++) {
                    for (let col = 0; col < this.cols; col++) {
                        if (row === this.emptyPos.row && col === this.emptyPos.col) {
                            continue;
                        }
                        this.board[row][col] = this.tiles[tileIndex++];
                    }
                }
            }

            getTileClass(row, col) {
                const classes = ['tile'];
                const tile = this.board[row][col];
                
                if (tile !== null) {
                    classes.push(tile.color);
                    if (row === 0 || row === 8) {
                        classes.push('hidden-tile');
                    }
                } else {
                    classes.push('empty');
                }
                
                return classes.join(' ');
            }

            canMove(row, col) {
                return (Math.abs(row - this.emptyPos.row) === 1 && col === this.emptyPos.col) || 
                       (Math.abs(col - this.emptyPos.col) === 1 && row === this.emptyPos.row);
            }

            renderBoard() {
                const boardElement = document.getElementById('puzzleBoard');
                boardElement.innerHTML = '';

                for (let row = 0; row < this.rows; row++) {
                    for (let col = 0; col < this.cols; col++) {
                        const tile = this.board[row][col];
                        const tileElement = document.createElement('div');
                        
                        tileElement.className = this.getTileClass(row, col);
                        tileElement.dataset.row = row;
                        tileElement.dataset.col = col;
                        
                        if (tile !== null) {
                            tileElement.addEventListener('click', () => this.handleTileClick(row, col));
                        }
                        
                        boardElement.appendChild(tileElement);
                    }
                }

                this.renderReferenceSide();
            }

            renderReferenceSide() {
                const referenceSide = document.getElementById('referenceSide');
                referenceSide.innerHTML = '';

                const label = document.createElement('div');
                label.className = 'reference-label';
                label.textContent = translations[currentLanguage].referenceLabel;
                referenceSide.appendChild(label);

                for (let row = 1; row <= 7; row++) {
                    for (let col = 0; col < this.cols; col++) {
                        const cell = document.createElement('div');
                        cell.className = 'reference-cell';
                        
                        // Show the current challenge character in the reference
                        const challenge = this.challenges[this.currentChallenge];
                        if (this.isCharacterFormed(row, col, challenge.character)) {
                            cell.textContent = challenge.character;
                        }
                        
                        referenceSide.appendChild(cell);
                    }
                }
            }

            isCharacterFormed(row, col, character) {
                // Simple pattern matching for demonstration
                // In a real implementation, this would check the actual tile positions
                const patterns = {
                    'ا': [[4, 2]],
                    'ب': [[3, 2]],
                    'ت': [[4, 1], [4, 2], [4, 3]],
                    'ث': [[3, 2], [4, 2], [5, 2]]
                    // Add more patterns for other characters
                };
                
                const pattern = patterns[character];
                if (!pattern) return false;
                
                return pattern.some(pos => pos[0] === row && pos[1] === col);
            }

            checkWinCondition() {
                // Check if the current challenge character is formed
                const challenge = this.challenges[this.currentChallenge];
                // This is a simplified check - in reality, you'd verify the exact pattern
                // For now, we'll just check if enough moves have been made as a placeholder
                if (this.moves >= 100) { // Simplified win condition
                    this.soundManager.play('success');
                    setTimeout(() => {
                        alert(currentLanguage === 'english' ? 
                            `Congratulations! You formed ${challenge.character}!` :
                            `مبروك! لقد شكلت ${challenge.character}!`);
                        this.nextChallenge();
                    }, 500);
                    return true;
                }
                return false;
            }

            handleTileClick(row, col) {
                if (this.isMoving || this.isFlipped) return;
                
                this.soundManager.play('click');
                
                if (this.canMove(row, col)) {
                    if (!this.gameStarted) {
                        this.gameStarted = true;
                    }
                    this.moveTile(row, col);
                }
            }

            moveTile(row, col) {
                if (this.isMoving) return;

                this.isMoving = true;
                this.soundManager.play('slide');
                
                this.board[this.emptyPos.row][this.emptyPos.col] = this.board[row][col];
                this.board[row][col] = null;
                this.emptyPos = { row, col };
                
                this.moves++;
                this.updateMoveCounter();
                
                setTimeout(() => {
                    this.renderBoard();
                    this.isMoving = false;
                    this.checkWinCondition();
                }, 150);
            }

            flipPuzzle() {
                this.soundManager.play('flip');
                const board = document.getElementById('puzzleBoard');
                this.isFlipped = !this.isFlipped;
                board.classList.toggle('flipped', this.isFlipped);
                
                const flipBtn = document.getElementById('flipBtn');
                flipBtn.textContent = this.isFlipped ? 
                    (currentLanguage === 'english' ? '📚 Show Puzzle' : '📚 عرض اللغز') : 
                    (currentLanguage === 'english' ? '📖 Flip Puzzle' : '📖 قلب اللغز');
            }

            nextChallenge() {
                this.soundManager.play('click');
                this.currentChallenge = (this.currentChallenge + 1) % this.challenges.length;
                this.updateChallengeDisplay();
                this.renderReferenceSide();
                this.resetGame();
                
                // Add fun animation
                const challengeElement = document.getElementById('currentChallenge');
                challengeElement.classList.add('pulse');
                setTimeout(() => challengeElement.classList.remove('pulse'), 500);
            }

            updateChallengeDisplay() {
                const challenge = this.challenges[this.currentChallenge];
                const displayText = currentLanguage === 'english' ? 
                    `Form the ${challenge.name}` : 
                    `شكّل ${challenge.arabicName}`;
                
                document.getElementById('currentChallenge').textContent = displayText;
                document.getElementById('challengeCounter').textContent = `${this.currentChallenge + 1}/${this.challenges.length}`;
            }

            resetGame() {
                this.moves = 0;
                this.gameStarted = false;
                this.updateMoveCounter();
                this.initializeBoard();
                this.renderBoard();
            }

            shuffle() {
                this.soundManager.play('shuffle');
                this.resetGame();
                
                const directions = [
                    { row: -1, col: 0 }, { row: 1, col: 0 },
                    { row: 0, col: -1 }, { row: 0, col: 1 }
                ];

                let shuffleMoves = 200;
                
                const makeShuffleMove = () => {
                    if (shuffleMoves <= 0) {
                        this.renderBoard();
                        return;
                    }

                    const validMoves = directions.filter(dir => {
                        const newRow = this.emptyPos.row + dir.row;
                        const newCol = this.emptyPos.col + dir.col;
                        return newRow >= 0 && newRow < this.rows && newCol >= 0 && newCol < this.cols;
                    });

                    if (validMoves.length > 0) {
                        const randomMove = validMoves[Math.floor(Math.random() * validMoves.length)];
                        const newRow = this.emptyPos.row + randomMove.row;
                        const newCol = this.emptyPos.col + randomMove.col;
                        
                        this.board[this.emptyPos.row][this.emptyPos.col] = this.board[newRow][newCol];
                        this.board[newRow][newCol] = null;
                        this.emptyPos = { row: newRow, col: newCol };
                        
                        shuffleMoves--;
                    }
                    
                    setTimeout(makeShuffleMove, 5);
                };

                makeShuffleMove();
            }

            reset() {
                this.soundManager.play('click');
                this.resetGame();
            }

            updateMoveCounter() {
                document.getElementById('moveCounter').textContent = this.moves;
            }

            setupEventListeners() {
                document.getElementById('shuffleBtn').addEventListener('click', () => {
                    this.shuffle();
                });

                document.getElementById('resetBtn').addEventListener('click', () => {
                    this.reset();
                });

                document.getElementById('flipBtn').addEventListener('click', () => {
                    this.flipPuzzle();
                });

                document.getElementById('nextChallenge').addEventListener('click', () => {
                    this.nextChallenge();
                });

                document.getElementById('colorToggle').addEventListener('click', () => {
                    this.toggleColor();
                });

                document.getElementById('soundToggle').addEventListener('click', () => {
                    this.soundManager.toggle();
                });

                document.getElementById('languageToggle').addEventListener('click', () => {
                    this.toggleLanguage();
                });

                document.querySelectorAll('button').forEach(button => {
                    if (button.id !== 'soundToggle' && button.id !== 'languageToggle' && button.id !== 'colorToggle') {
                        button.addEventListener('click', () => {
                            this.soundManager.play('click');
                        });
                    }
                });
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            new SlidingPuzzle();
        });
    </script>
</body>
</html>